{"version":3,"sources":["components/NavbarTop.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["NavbarTop","props","state","id","result","Navbar","bg","variant","Brand","href","Nav","className","Link","Form","inline","FormControl","type","placeholder","Button","Component","Home","formDiv","Group","controlId","Label","Control","rows","name","defaultValue","jiraPrjKey","onChange","onChangeForm","onKeyPress","handleKeyPress","trPrjId","trParentSecId","as","Row","Col","sm","span","size","onClick","onClickBtn","e","fieldName","target","fleldVal","value","setState","charCode","preventDefault","body","projectkey","trprojectId","trparentId","axios","post","process","then","res","console","log","data","msg","message","textEntered","this","Alert","map","obj","Object","values","item","i","key","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.815fac2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nclass NavbarTop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //   userEmail: this.props.location.state\r\n      //     ? this.props.location.state.userEmail\r\n      //     : \"\",\r\n      id: \"a\",\r\n      result: {},\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/Home\">Navbar</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/Home\">Home</Nav.Link>\r\n          <Nav.Link href=\"/Search\">Search</Nav.Link>\r\n        </Nav>\r\n        <Form inline>\r\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n          <Button variant=\"outline-info\">Search</Button>\r\n        </Form>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarTop;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Nav from \"./NavbarTop\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      textEntered: \"\",\r\n      jiraPrjKey: \"PROJ1\",\r\n      trPrjId: 1,\r\n      trParentSecId: 2,\r\n      msg: \"\",\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  formDiv = () => {\r\n    return (\r\n      <div>\r\n        <Form className=\"form\">\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Jira Project Key</Form.Label>\r\n            <Form.Control\r\n              //   as=\"textarea\"\r\n              type=\"text\"\r\n              rows=\"3\"\r\n              name=\"jiraPrjKey\"\r\n              //   placeholder=\"Enter Text..\"\r\n              defaultValue={this.state.jiraPrjKey}\r\n              onChange={this.onChangeForm}\r\n              onKeyPress={this.handleKeyPress}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Testrail Project Id</Form.Label>\r\n            <Form.Control\r\n              //   as=\"textarea\"\r\n              type=\"text\"\r\n              rows=\"3\"\r\n              name=\"trPrjId\"\r\n              //   placeholder=\"Enter Text..\"\r\n              defaultValue={this.state.trPrjId}\r\n              onChange={this.onChangeForm}\r\n              onKeyPress={this.handleKeyPress}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Enter Text</Form.Label>\r\n            <Form.Control\r\n              //   as=\"textarea\"\r\n              type=\"text\"\r\n              rows=\"3\"\r\n              name=\"trParentSecId\"\r\n              //   placeholder=\"Enter Text..\"\r\n              defaultValue={this.state.trParentSecId}\r\n              onChange={this.onChangeForm}\r\n              onKeyPress={this.handleKeyPress}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group as={Row}>\r\n            <Col sm={{ span: 10 }}>\r\n              <Button\r\n                size=\"sm\"\r\n                name=\"getDataBtn\"\r\n                onClick={this.onClickBtn}\r\n                type=\"submit\"\r\n              >\r\n                Create Test cases in Testrail from Jira Issues\r\n              </Button>\r\n              &nbsp;\r\n              {/* <Button\r\n                size=\"sm\"\r\n                name=\"createWebhookBtn\"\r\n                onClick={this.onClickCreateWebhookBtn}\r\n                type=\"submit\"\r\n              >\r\n                Create Webhook\r\n              </Button> */}\r\n            </Col>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onChangeForm = (e) => {\r\n    let fieldName = e.target.name;\r\n    let fleldVal = e.target.value;\r\n    this.setState({\r\n      [fieldName]: fleldVal,\r\n    });\r\n  };\r\n  handleKeyPress = (e) => {\r\n    if (e.charCode === 13) {\r\n      //   console.log(\"Enter clicked!!!\");\r\n      this.onClickBtn(e);\r\n    }\r\n  };\r\n  onClickBtn = (e) => {\r\n    e.preventDefault();\r\n    let body = {\r\n      projectkey: this.state.jiraPrjKey,\r\n      trprojectId: this.state.trPrjId,\r\n      trparentId: this.state.trParentSecId,\r\n    };\r\n    const url =\r\n      //   process.env.REACT_APP_SERVER_URL_DOMAIN + // process.env.REACT_APP_SERVER_URL_DOMAIN was supposed to be 'http://localhost:4000'\r\n      process.env.REACT_APP_SERVER_ADD_TR_SEC_FROM_JIRA_ISSUE_API_ENDPOINT;\r\n    axios.post(url, body).then((res) => {\r\n      console.log(res.data);\r\n      this.setState({\r\n        msg: \"got message\",\r\n        message: res.data,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav />\r\n        {this.formDiv()}\r\n        {/* this.state.message is like = \r\n            [\r\n                {newSection: \"Section PROJ1-2: Issue 2 already exists. Id: 7\", newTestCase: \"No new test case added\"}\r\n                {newSection: \"Section PROJ1-1: Issue1 for Crossover already exists. Id: 4\", newTestCase: \"No new test case added\"}\r\n            ]\r\n        */}\r\n        {this.state.message ? (\r\n          <Alert variant=\"success\">\r\n            {this.state.message.map((obj) => {\r\n              return Object.values(obj).map((item, i) => {\r\n                return <p key={i}>{item}</p>;\r\n              });\r\n            })}\r\n          </Alert>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={Home} exact />\n        <Route path=\"/Home\" component={Home} />\n        <div className=\"App\">\n          <Home />\n        </div>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}